一. 合理使用字符串
String str1= "abc";
String str2= new String("abc");
String str3= str2.intern();
assertSame(str1==str2);
assertSame(str2==str3);
assertSame(str1==str3)
答案是false false true
str1是建立在常量池中的“abc”，str2是new出来，在堆内存里的，所以str1!=str2，
str3是通过str2.intern()出来的，str1在常量池中已经建立了"abc"，这个时候str3是从常量池里取出来的，和str1指向的是同一个对象，自然也就有了st1==str3，str3!=str2了。
所以，使用String.intern()方法可以直接使用常量池中已经存在的字符串对象，能够节省空间。如果常量池中没有，就会新建一个放入到常量池里。

二.　谨慎使用正则表达式
使用正则表达式容易造成回溯问题，导致CPU飙升，所以要谨慎使用正则表达式。
比如可以用indexOf和lastIndexOf代替split。
split有两种情况不会使用正则表达式：
第一种为传入的参数长度为1，且不包含“.$|()[{^?*+\\”regex元字符的情况下，不会使用正则表达式；
第二种为传入的参数长度为2，第一个字符是反斜杠，并且第二个字符不是ASCII数字或ASCII字母的情况下，不会使用正则表达式
什么是正则表达式的回溯问题？
见“正则表达式回溯问题示意图.jpg”
引起回溯问题的原因是Java中正则表达式默认是贪婪匹配的，即默认会以最长满足条件的作为匹配。
例如text="abbbb"  regx="ab{1-3}" 　默认贪婪匹配结果是abbb而不是ab
如果regx="ab{1-3}?"则开启了懒惰模式，匹配出ab，这时不会有回溯问题。
text="abbc" regx="ab{1,3}+bc" 字符后面添加一个+号，则开启了独占模式，如果不匹配也不会发生回溯。直接返回不匹配。
正则表达式使用建议：
１）要尽量使用独占模式和懒惰模式来避免正则表达式的回溯问题。
２）要减少正则表达式中(A|B|C)的分支选择语句，必要时用三次index来代替。
３）减少匹配的分组可以提升性能
public static void main( String[] args )
{
	String text = "<input high=\"20\" weight=\"70\">test</input>";
	String reg="(<input.*?>)(.*?)(</input>)";
	Pattern p = Pattern.compile(reg);
	Matcher m = p.matcher(text);
	while(m.find()) {
		System.out.println(m.group(0));// 整个匹配到的内容
		System.out.println(m.group(1));//(<input.*?>)
		System.out.println(m.group(2));//(.*?)
		System.out.println(m.group(3));//(</input>)
	}
}

三.　ArrayList还是LinkedList
ArrayList底层使用的数据结构是数组，而LinkedList底层数据结构是链表。
如果数据在中间插入比较频繁，且不会去遍历，则使用LinkedList效率高。
如果数据经常要遍历，或者在中间插入的机会小，那么ArrayList效率高。因为ArrayList越往前插入效率月底，存在数组的拷贝。但是遍历数组的效率肯定高于链表。

四. 在Java8中使用Stream类
使用Stream，用内部迭代代替外部迭代...

五. HashMap的设计和优化
transient Node<K,V>[] table;看源码可知HashMap实际上是一个Node数组，包含了k,v键值对，指向下一个节点的指针和键的hash值。假设数组长度是n, hash表中有m个元素。
static class Node<K,V> implements Map.Entry<K,V> {
        final int hash;
        final K key;
        V value;
        Node<K,V> next;

        Node(int hash, K key, V value, Node<K,V> next) {
            this.hash = hash;
            this.key = key;
            this.value = value;
            this.next = next;
        }
}
装载因子：m/n，默认是0.75,表示Hash的装载程度，该值越低，说明空间利用率越低，浪费越多；该值太大，则会使Hash表冲突增多，这时候用链式法解决冲突时，如果链太长，就会影响性能。
边界值：默认是12,表示Node的数量超过12时，HashMap就会调用resize()方法重新分配数组，这样会导致内存的分配和迁移，从而影响性能。
HashMap put方法：
public V put(K key, V value) {
	return putVal(hash(key), key, value, false, true);
}
这是HashMap选用的hash函数，尽量打乱hash值的低16位
static final int hash(Object key) {
	int h;
	return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
}
然后在选择数组位置的时候：
        n = (tab = resize()).length;
        // 通过 putVal 方法中的 (n - 1) & hash 决定该 Node 的存储位置
        if ((p = tab[i = (n - 1) & hash]) == null)
            tab[i] = newNode(hash, key, value, null);
在Java1.8，HashMap使用了红黑树作为数据结构，原因是链表长度大于８的时候，红黑树的效率O(logn)比链表好。
所以在链表长度大于８时使用了红黑树。

六. IO优化
１．使用NIO代替传统的IO
１）NIO是基于Block的，读写都会有缓冲区，可以将文件一次性读入内训后再做处理。其Buffer是一块连续的内存，是读写数据的中转地，Channel用于读取缓冲或者写入数据，是访问缓冲的接口。
２）提供了DirectBuffer使用。DirectBuffer申请的是非JVM的物理内存，减少了了用户态到内核态复制数据的步骤，但是由于是非JVM内存，创建和销毁的代价也很大，要谨慎使用。
３）避免阻塞发生，优化了IO操作。NIO使用了操作系统中的IO多路复用器，可以同时监听多个Channel.　当Channel上没有IO操作时，线程就不会一直等待，而是会不断轮询（select,poll)，从而避免了阻塞。
一个设备接口试图通过总线直接向外部设备(磁盘)传送数据时，它会先向CPU发送DMA请求信号。外部设备(磁盘)通过DMA控制器（DMAC），向CPU提出接管总线控制权的总线请求，CPU收到该信号后，在当前的总线周期结束后，会按DMA信号的优先级和提出DMA请求的先后顺序响应DMA信号。CPU对某个设备接口响应DMA请求时，会让出总线控制权。于是在DMA控制器的管理下，磁盘和存储器直接进行数据交换，而不需CPU干预。数据传送完毕后，设备接口会向CPU发送DMA结束信号，交还总线控制权。
而Channel在DMA的基础上增加了能执行有限通道指令的I/O控制器，代替CPU管理控制外设。通道有自己的指令系统，是一个协处理器，他实质是一台能够执行有限的输入输出指令，并且有专门通讯传输的通道总线完成控制。就避免了总线冲突，提高了内核和磁盘之间数据交互的效率。
补充：select, poll和epoll的区别：
１）select的fd_set有１０２４大小的限制，而poll没有１０２４的限制，它们两个都是轮询的方式。fd_set理解为文件描述符号的集合，里面可以存放很多fd.
２）epoll使用事件驱代替分拣描述符fd_set. epoll事先通过epoll_ctl()注册一个文件描述符fd,将fd放到内核的一个事件表中，这个事件表基于红黑树实现，所以再大量IO操作的场景下，插入删除性能都比数组fd_set要好，因此性能更好，也不会受fd数量的限制。

七. 避免使用Java序列化
１．无法跨语言
２．反序列化操作容易引起安全问题
３．序列化后流太大
４．序列化性能太差
建议：用Json序列化代替Java序列化，比如Spring Cloud就使用了Json序列化。 更好的方法是使用ProtoBuf代替Java序列化.　ProtoBuf是谷歌设计的一种高效率的基于TLV的数据结构，性能远好于Json序列化。





